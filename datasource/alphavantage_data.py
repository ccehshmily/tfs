# -*- coding: utf-8 -*-
"""AlphaVantage Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11b4uvQRMgUElA-3ZB4LUREZ39Tev7BNf
"""

import glob
import io
import math
import os
import requests
import json
import time

from IPython import display
from matplotlib import cm
from matplotlib import gridspec
from matplotlib import pyplot as plt
import io
import numpy as np
import pandas as pd
import seaborn as sns
from sklearn import metrics
import tensorflow as tf

# All Constants

# Testing purpose
SYMBOL = 'JNUG'

# Symbols
JNUG = 'JNUG'

# Basic Consts
API_KEY = 'OS0BFGWBH6O9XSXT'
BASE_URL = 'https://www.alphavantage.co/query'

# Function Configs
FEATURE_CONFIGS = {
    'SMA_60': {
        'function': 'SMA',
        'interval': 'daily',
        'time_period': 60,
        'series_type': 'close'
    },
    'EMA_60': {
        'function': 'EMA',
        'interval': 'daily',
        'time_period': 60,
        'series_type': 'close'
    },
    'WMA_60': {
        'function': 'WMA',
        'interval': 'daily',
        'time_period': 60,
        'series_type': 'close'
    },
    'MACD_daily': {
        'function': 'MACD',
        'interval': 'daily',
        'time_period': None,
        'series_type': 'close'
    },
    'STOCH_daily': {
        'function': 'STOCH',
        'interval': 'daily',
        'time_period': None,
        'series_type': None
    },
    'RSI_60': {
        'function': 'RSI',
        'interval': 'daily',
        'time_period': 60,
        'series_type': 'close'
    },
    'ADX_60': {
        'function': 'ADX',
        'interval': 'daily',
        'time_period': 60,
        'series_type': None
    },
    'CCI_60': {
        'function': 'CCI',
        'interval': 'daily',
        'time_period': 60,
        'series_type': None
    },
    'AROON_60': {
        'function': 'AROON',
        'interval': 'daily',
        'time_period': 60,
        'series_type': None
    },
    'BBANDS_60': {
        'function': 'BBANDS',
        'interval': 'daily',
        'time_period': 60,
        'series_type': 'close'
    },
    'AD_daily': {
        'function': 'AD',
        'data_key': 'Technical Analysis: Chaikin A/D',
        'interval': 'daily',
        'time_period': None,
        'series_type': None
    },
    'OBV_daily': {
        'function': 'OBV',
        'interval': 'daily',
        'time_period': None,
        'series_type': None
    },
}

def LoadDataInJson(url, symbol, api_key):
  # Always sleep 15 seconds to avoid exceeding 5/min API call limit
  time.sleep(15)
  data_from_request = requests.get(url + '&symbol=' + symbol + '&apikey=' + api_key).text
  return json.loads(data_from_request)

def PrintJson(json_data):
  print json.dumps(json_data, sort_keys=True, indent=4, separators=(',', ': '))

def LoadDailyBasicData(symbol):
  print "<<<Loading basic daily data..."

  _MAIN_DATA_KEY = 'Time Series (Daily)'
  _OPEN_KEY = '1. open'
  _HIGH_KEY = '2. high'
  _LOW_KEY = '3. low'
  _CLOSE_KEY = '4. close'
  _VOLUME_KEY = '5. volume'

  daily_basic = LoadDataInJson(BASE_URL + '?function=TIME_SERIES_DAILY&outputsize=full', symbol, API_KEY)
  daily_basic_data = daily_basic[_MAIN_DATA_KEY]
  dates = daily_basic_data.keys()
  list.sort(dates)

  output_daily_data = []
  for date in dates:
    output_daily_data.append({
        'date': date,
        'open': float(daily_basic_data[date][_OPEN_KEY]),
        'high': float(daily_basic_data[date][_HIGH_KEY]),
        'low': float(daily_basic_data[date][_LOW_KEY]),
        'close': float(daily_basic_data[date][_CLOSE_KEY]),
        'volume': float(daily_basic_data[date][_VOLUME_KEY]),
    })

  print ">>>Loading basic daily data completed"
  return output_daily_data

def CalculatePriceChangePercentage(daily_basic_data):
  for i in range(len(daily_basic_data)):
    if i >= len(daily_basic_data) - 1:
      daily_basic_data[i]['price_change_1d'] = None
      daily_basic_data[i]['volume_change_1d'] = None
    else:
      daily_basic_data[i]['price_change_1d'] = (daily_basic_data[i+1]['close'] - daily_basic_data[i]['close']) * 100 / daily_basic_data[i]['close']
      daily_basic_data[i]['volume_change_1d'] = (daily_basic_data[i+1]['volume'] - daily_basic_data[i]['volume']) * 100 / daily_basic_data[i]['volume']

    if i >= len(daily_basic_data) - 6:
      daily_basic_data[i]['price_change_1w'] = None
      daily_basic_data[i]['volume_change_1w'] = None
    else:
      daily_basic_data[i]['price_change_1w'] = (daily_basic_data[i+6]['close'] - daily_basic_data[i]['close']) * 100 / daily_basic_data[i]['close']
      daily_basic_data[i]['volume_change_1w'] = (daily_basic_data[i+6]['volume'] - daily_basic_data[i]['volume']) * 100 / daily_basic_data[i]['volume']

    if i >= len(daily_basic_data) - 21:
      daily_basic_data[i]['price_change_1m'] = None
      daily_basic_data[i]['volume_change_1m'] = None
    else:
      daily_basic_data[i]['price_change_1m'] = (daily_basic_data[i+21]['close'] - daily_basic_data[i]['close']) * 100 / daily_basic_data[i]['close']
      daily_basic_data[i]['volume_change_1m'] = (daily_basic_data[i+21]['volume'] - daily_basic_data[i]['volume']) * 100 / daily_basic_data[i]['volume']


# Unit tests
# test_daily_data = LoadDailyBasicData(SYMBOL)
# CalculatePriceChangePercentage(test_daily_data)
# print test_daily_data[0]

def LoadFunction(symbol, feature_name, function, data_key = None, interval = None, time_period = None, series_type = None):
  print "<<<Loading " + function + "..."

  _FUNCTION_DATA_KEY_PREFIX = 'Technical Analysis: '
  function_data_key = _FUNCTION_DATA_KEY_PREFIX + function
  if data_key <> None:
    function_data_key = data_key

  function_url = BASE_URL + '?function=' + function
  if interval <> None:
    function_url = function_url + '&interval=' + str(interval)
  if time_period <> None:
    function_url = function_url + '&time_period=' + str(time_period)
  if series_type <> None:
    function_url = function_url + '&series_type=' + str(series_type)

  function_data_json = LoadDataInJson(function_url, symbol, API_KEY)

  if function_data_key not in function_data_json:
    print "Loading failed, loaded keys: "
    print function_data_json.keys()
    if "Information" in function_data_json.keys():
      print function_data_json['Information']
    return {}
  function_data = function_data_json[function_data_key]
  print "Processing loaded " + function_data_key

  output_function_data = {}
  for date in function_data.keys():
    if len(date) > 10:
      # Only fetch full day data and ignore ones like this: '2018-08-20 11:22:12'
      continue

    data = function_data[date]
    data_for_date = {}
    for key in data.keys():
      data_for_date[feature_name + ":" + key] = float(data[key])
    output_function_data[date] = data_for_date

  print ">>>Loading " + function + " completed"
  return output_function_data

def LoadFunctions(symbol):
  functions_data = {}

  for feature in FEATURE_CONFIGS.keys():
    config = FEATURE_CONFIGS[feature]
    function = config['function']
    data_key = None
    if 'data_key' in config:
      data_key = config['data_key']
    function_data = LoadFunction(symbol, feature, function, data_key=data_key, interval=config['interval'], time_period=config['time_period'], series_type=['series_type'])
    for date in function_data.keys():
      if date in functions_data:
        functions_data_daily = functions_data[date]
      else:
        functions_data_daily = {}

      function_data_daily = function_data[date]
      for key in function_data_daily.keys():
        functions_data_daily[key] = function_data_daily[key]

      functions_data[date] = functions_data_daily

  return functions_data


# Unit tests
# test_functions_data = LoadFunctions(SYMBOL)
# test_keys = test_functions_data.keys()
# list.sort(test_keys)
# print test_keys
# print test_functions_data['2018-06-29']
# print test_functions_data['2018-06-29']['EMA_60:EMA']

def LoadCombinedDailyData(symbol):
  daily_data = LoadDailyBasicData(symbol)
  CalculatePriceChangePercentage(daily_data)
  functions_data = LoadFunctions(symbol)

  combined_data = []
  feature_keys = {}

  for one_day_data in daily_data:
    date = one_day_data['date']
    if date not in functions_data:
      continue

    one_day_function_data = functions_data[date]
    for feature_key in one_day_function_data.keys():
      one_day_data[feature_key] = one_day_function_data[feature_key]

    for feature_key in one_day_data.keys():
      feature_keys[feature_key] = True

    combined_data.append(one_day_data)

  return feature_keys.keys(), combined_data


# Unit tests
# test_combined_daily_data = LoadCombinedDailyData(SYMBOL)
# print test_combined_daily_data[0]
# print test_combined_daily_data[-1]

def LoadSymbolDataToFile(symbol, filename):
  feature_keys, combined_daily_data = LoadCombinedDailyData(symbol)
  if len(combined_daily_data) == 0:
    return

  f = file(filename + ".csv", 'w')

  for key in feature_keys:
    f.write(key + ",")
  f.write("\n")

  for one_day_data in combined_daily_data:
    for key in feature_keys:
      if key in one_day_data and one_day_data[key] <> None:
        f.write(str(one_day_data[key]) + ",")
      else:
        f.write(",")
    f.write("\n")

  print "Successfully loaded " + str(len(combined_daily_data)) + " days' data into " + filename + ".csv"


if __name__ == "__main__":
  LoadSymbolDataToFile(JNUG, "jnug")
